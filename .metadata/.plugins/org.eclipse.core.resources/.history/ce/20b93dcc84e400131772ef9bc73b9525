package br.pucgoias.fichaverificacao.controle;

import java.util.ArrayList;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.component.html.HtmlInputHidden;
import javax.faces.context.FacesContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import br.pucgoias.fichaverificacao.entidade.FichaVerificacao;
import br.pucgoias.fichaverificacao.negocio.FichaVerificacaoService;
import br.pucgoias.util.FichaVerificacaoException;

/**
 * Classe que controla as requisicoes do cliente web
 * 
 * @author Danillo
 * 
 */
@ManagedBean(name = "pessoaController")
@RequestScoped
@Controller
public class FichaVerificacaoController
{

	@Autowired
	private FichaVerificacaoBean fichaVerificacaoBean;
	@Autowired
	private List<FichaVerificacaoBean> listaFichaVerificacaoBean;
	@Autowired
	private FichaVerificacaoService fichaVerificacaoService;

	/**
	 * Inclui uma fichaverificacao na base de dados
	 * 
	 * @return
	 */
	public String incluir()
	{
		try
		{

			FichaVerificacao fichaverificacao = new FichaVerificacao();

			// preenche os dados da tela no objeto persistente
			
			
			fichaverificacao.setIdFichaVerificacao(fichaVerificacaoBean.getIdFichaVerificacao());
			fichaverificacao.setConformidade(fichaVerificacaoBean.getConformidade());
			fichaverificacao.setData(fichaVerificacaoBean.getData());
			
			
			
			getFichaVerificacaoService().incluir(fichaverificacao);

			return "sucesso";
		}
		catch (Exception e)
		{
			String msg = "Inclusão não realizada. Movito: "
					+ ((e instanceof FichaVerificacaoException ? ((FichaVerificacaoException) e)
							.getEx().getMessage() : ""));
			FacesMessage message = new FacesMessage(msg);
			this.getFacesContext().addMessage("formulario", message);
			return "falha";
		}
	}

	/**
	 * Lista as pessoas cadastradas
	 * 
	 * @return
	 */
	public String listar()
	{
		try
		{

			List<FichaVerificacao> listaFichaVerificacao = getFichaVerificacaoService().listar();

			if (listaFichaVerificacao == null || listaFichaVerificacao.size() == 0)
			{
				FacesMessage message = new FacesMessage(
						"Nenhum registro encontrado.");
				this.getFacesContext().addMessage("formulario", message);
				return "listar";
			}

			// preeche a lista de pessoas da tela
			listaFichaVerificacaoBean = new ArrayList<FichaVerificacaoBean>();
			for (FichaVerificacao fichaVerificacao : listaFichaVerificacao)
			{
				FichaVerificacaoBean fichaVerificacaoBean = new FichaVerificacaoBean();
				pessoaBean.setIdPessoa(pessoa.getIdPessoa());
				pessoaBean.setDsNome(pessoa.getDsNome());
				pessoaBean.setVlIdade((pessoa.getVlIdade() != null && !""
						.equals(pessoa.getVlIdade())) ? Integer.parseInt(pessoa
						.getVlIdade()) : 0);
				listaPessoaBean.add(pessoaBean);
			}

			return "listar";
		}
		catch (Exception e)
		{
			String msg = "Listagem não realizada. Movito: "
					+ ((e instanceof FichaVerificacaoException ? ((FichaVerificacaoException) e)
							.getEx().getMessage() : ""));
			FacesMessage message = new FacesMessage(msg);
			this.getFacesContext().addMessage("formulario", message);
			return "falha";
		}
	}

	/**
	 * Consulta uma pessoa cadastrada
	 * 
	 * @return
	 */
	public String consultar()
	{
		try
		{

			HtmlInputHidden idPessoa = (HtmlInputHidden) this.getFacesContext()
					.getViewRoot().findComponent("formulario:idPessoa");

			Pessoa pessoa = getPessoaService().consultar(
					(Integer) idPessoa.getValue());

			if (pessoa == null || pessoa.getIdPessoa() == null)
			{
				FacesMessage message = new FacesMessage(
						"Nenhum registro encontrado.");
				this.getFacesContext().addMessage("formulario", message);
				return "listar";
			}

			// preenche os dados do bean da tela
			pessoaBean.setIdPessoa(pessoa.getIdPessoa());
			pessoaBean.setDsNome(pessoa.getDsNome());
			pessoaBean.setVlIdade((pessoa.getVlIdade() != null && !""
					.equals(pessoa.getVlIdade())) ? Integer.parseInt(pessoa
					.getVlIdade()) : 0);

			// preeche a lista de telefones da tela
			pessoaBean.setListaTelefone(new ArrayList<TelefoneBean>());
			for (Telefone telefone : pessoa.getListaTelefone())
			{
				TelefoneBean telefoneBean = new TelefoneBean();
				telefoneBean.setIdTelefone(telefone.getIdTelefone());
				telefoneBean.setClTipo(telefone.getClTipo());
				telefoneBean.setDsNumero(telefone.getDsNumero());
				pessoaBean.getListaTelefone().add(telefoneBean);
			}

			this.setSession("telefones", pessoaBean.getListaTelefone());

			return "editar";
		}
		catch (Exception e)
		{
			String msg = "Consulta não realizada. Movito: "
					+ ((e instanceof FichaVerificacaoException ? ((FichaVerificacaoException) e)
							.getEx().getMessage() : ""));
			FacesMessage message = new FacesMessage(msg);
			this.getFacesContext().addMessage("formulario", message);
			return "falha";
		}
	}

	/**
	 * Cria uma nova pessoa
	 * 
	 * @return
	 */
	public String criar()
	{
		try
		{

			pessoaBean = new FichaVerificacaoBean();
			pessoaBean.setListaTelefone(new ArrayList<TelefoneBean>());

			this.setSession("telefones", pessoaBean.getListaTelefone());

			return "criar";
		}
		catch (Exception e)
		{
			String msg = "Criação não realizada. Movito: "
					+ ((e instanceof FichaVerificacaoException ? ((FichaVerificacaoException) e)
							.getEx().getMessage() : ""));
			FacesMessage message = new FacesMessage(msg);
			this.getFacesContext().addMessage("formulario", message);
			return "falha";
		}
	}

	/**
	 * Adiciona um telefone de uma pessoa
	 * 
	 * @return
	 */
	public String adicionar()
	{
		try
		{

			TelefoneBean novo = new TelefoneBean();
			novo.setClTipo(telefoneBean.getClTipo());
			novo.setDsNumero(telefoneBean.getDsNumero());

			pessoaBean.getListaTelefone().add(novo);

			telefoneBean = new TelefoneBean();

			this.setSession("telefones", pessoaBean.getListaTelefone());

			return "criar";
		}
		catch (Exception e)
		{
			FacesMessage message = new FacesMessage(
					"Criação não realizada. Movito: " + e.getMessage());
			this.getFacesContext().addMessage("formulario", message);
			return "falha";
		}
	}

	/**
	 * Adiciona um telefone de uma pessoa
	 * 
	 * @return
	 */
	public String adicionarEditar()
	{
		try
		{

			TelefoneBean novo = new TelefoneBean();
			novo.setClTipo(telefoneBean.getClTipo());
			novo.setDsNumero(telefoneBean.getDsNumero());

			pessoaBean.getListaTelefone().add(novo);

			telefoneBean = new TelefoneBean();

			this.setSession("telefones", pessoaBean.getListaTelefone());

			return "editar";
		}
		catch (Exception e)
		{
			FacesMessage message = new FacesMessage(
					"Criação não realizada. Movito: " + e.getMessage());
			this.getFacesContext().addMessage("formulario", message);
			return "falha";
		}
	}

	/**
	 * Remove um telefone da lista de uma pessoa
	 * 
	 * @return
	 */
	public String remover()
	{
		try
		{

			HtmlDataTable telefones = (HtmlDataTable) this.getFacesContext()
					.getViewRoot().findComponent("formulario:telefones");
			pessoaBean.getListaTelefone().remove(
					pessoaBean.getListaTelefone().indexOf(
							telefones.getRowData()));

			return null;
		}
		catch (Exception e)
		{
			String msg = "Exclusão não realizada. Movito: "
					+ ((e instanceof FichaVerificacaoException ? ((FichaVerificacaoException) e)
							.getEx().getMessage() : ""));
			FacesMessage message = new FacesMessage(msg);
			this.getFacesContext().addMessage("formulario", message);
			return "falha";
		}
	}

	/**
	 * Exclui uma pessoa cadastrada
	 * 
	 * @return
	 */
	public String excluir()
	{
		try
		{

			HtmlInputHidden idPessoa = (HtmlInputHidden) this.getFacesContext()
					.getViewRoot().findComponent("formulario:idPessoa");

			Pessoa pessoa = getPessoaService().consultar(
					(Integer) idPessoa.getValue());

			if (pessoa == null || pessoa.getIdPessoa() == null)
			{
				FacesMessage message = new FacesMessage(
						"Nenhum registro encontrado.");
				this.getFacesContext().addMessage("formulario", message);
				return "listar";
			}

			getPessoaService().excluir(pessoa.getIdPessoa());

			return "sucesso";
		}
		catch (Exception e)
		{
			String msg = "Exclusão não realizada. Movito: "
					+ ((e instanceof FichaVerificacaoException ? ((FichaVerificacaoException) e)
							.getEx().getMessage() : ""));
			FacesMessage message = new FacesMessage(msg);
			this.getFacesContext().addMessage("formulario", message);
			return "falha";
		}
	}

	/**
	 * Exclui uma pessoa cadastrada
	 * 
	 * @return
	 */
	public String alterar()
	{
		try
		{

			Pessoa pessoa = getPessoaService().consultar(
					pessoaBean.getIdPessoa());

			if (pessoa == null || pessoa.getIdPessoa() == null)
			{
				FacesMessage message = new FacesMessage(
						"Nenhum registro encontrado.");
				this.getFacesContext().addMessage("formulario", message);
				return "listar";
			}

			// preenche os dados da tela no objeto persistente
			pessoa.setDsNome(pessoaBean.getDsNome());
			pessoa.setVlIdade(pessoaBean.getVlIdade().toString());

			// preeche a lista de telefones da tela na lista de telefones
			// persistente
			pessoa.setListaTelefone(new ArrayList<Telefone>());
			for (TelefoneBean telefoneBean : pessoaBean.getListaTelefone())
			{
				Telefone telefone = new Telefone();
				telefone.setIdTelefone(telefoneBean.getIdTelefone() == 0 ? null
						: telefoneBean.getIdTelefone());
				telefone.setClTipo(telefoneBean.getClTipo());
				telefone.setDsNumero(telefoneBean.getDsNumero());
				telefone.setPessoa(pessoa);
				pessoa.getListaTelefone().add(telefone);
			}

			getPessoaService().alterar(pessoa);
			return "sucesso";

		}
		catch (Exception e)
		{
			String msg = "Alteração não realizada. Movito: "
					+ ((e instanceof FichaVerificacaoException ? ((FichaVerificacaoException) e)
							.getEx().getMessage() : ""));
			FacesMessage message = new FacesMessage(msg);
			this.getFacesContext().addMessage("formulario", message);
			return "falha";
		}
	}

	public FichaVerificacaoService getFichaVerificacaoService()
	{
		return fichaVerificacaoService;
	}

	public void setPessoaService(FichaVerificacaoService fichaVerificacaoService)
	{
		this.fichaVerificacaoService = fichaVerificacaoService;
	}

	private FacesContext getFacesContext()
	{
		return FacesContext.getCurrentInstance();
	}

	private Object getSession(String variavel)
	{
		return this.getFacesContext().getExternalContext().getSessionMap()
				.get(variavel);
	}

	private void setSession(String variavel, Object objeto)
	{
		this.getFacesContext().getExternalContext().getSessionMap()
				.put(variavel, objeto);
	}

	public FichaVerificacaoBean getfichaVerificacaoBean()
	{
		return fichaVerificacaoBean;
	}

	public void setPessoaBean(FichaVerificacaoBean fichaVerificacaoBean)
	{
		this.fichaVerificacaoBean = fichaVerificacaoBean;
	}

	public List<FichaVerificacaoBean> getListaPessoaBean()
	{
		return listaFichaVerificacaoBean;
	}

	public void setListaPessoaBean(List<FichaVerificacaoBean> listaFichaVerificacaoBean)
	{
		this.listaFichaVerificacaoBean = listaFichaVerificacaoBean;
	}

}
